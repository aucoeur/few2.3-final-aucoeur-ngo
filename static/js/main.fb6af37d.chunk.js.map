{"version":3,"sources":["components/Title/Title.js","components/Details/Details.js","components/StarWars/StarWars.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","name","className","Details","data","homeworld","birth_year","height","hair_color","eye_color","StarWars","useState","number","setNumber","setData","setHomeworld","characters","setCharacter","e","a","preventDefault","url","fetch","res","json","hw_res","hw_json","console","log","onSubmit","handleSubmit","type","pattern","placeholder","value","onChange","target","onClick","map","char","i","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yRAYeA,MAVf,SAAeC,GACX,IAAQC,EAASD,EAATC,KAER,OACI,qBAAKC,UAAU,QAAf,SACI,mCAAOD,Q,qCCiBJE,MAtBf,SAAiBH,GAGb,OAAKA,EAAMI,KAOH,qBAAKF,UAAU,UAAf,SACI,+BACI,6CAAgBF,EAAMK,aACtB,8CAAiBL,EAAMI,KAAKE,cAC5B,0CAAaN,EAAMI,KAAKG,UACxB,8CAAiBP,EAAMI,KAAKI,cAC5B,6CAAgBR,EAAMI,KAAKK,kBAXnC,yB,MC8DGC,MA9Df,WACI,MAA8BC,mBAAS,GAAvC,mBAAQC,EAAR,KAAgBC,EAAhB,KACA,EAA0BF,mBAAS,MAAnC,mBAAQP,EAAR,KAAcU,EAAd,KACA,EAAoCH,mBAAS,MAA7C,mBAAQN,EAAR,KAAmBU,EAAnB,KACA,EAAqCJ,mBAAS,IAA9C,mBAAQK,EAAR,KAAoBC,EAApB,KAJgB,4CAMhB,WAA4BC,GAA5B,uBAAAC,EAAA,6DACID,EAAEE,iBACIC,EAFV,uCAEgDT,GAFhD,kBAK0BU,MAAMD,GALhC,cAKcE,EALd,gBAM2BA,EAAIC,OAN/B,cAMcA,EANd,iBAQcV,EAAQU,GARtB,yBAU6BF,MAAME,EAAKnB,WAVxC,eAUcoB,EAVd,iBAW8BA,EAAOD,OAXrC,QAWcE,EAXd,OAaQX,EAAaW,EAAQzB,MACrB0B,QAAQC,IAAIF,EAAQzB,MAd5B,kDAgBQ0B,QAAQC,IAAR,MAhBR,2DANgB,sBA0BhB,OACI,gCACI,uBAAMC,SAAW,SAAAX,GAAC,OA5BV,2CA4BcY,CAAaZ,IAAnC,UACI,uBACIa,KAAK,OACLC,QAAQ,SACRC,YAAY,eACZC,MAAOtB,EACPuB,SAAU,SAACjB,GAAD,OAAOL,EAAUK,EAAEkB,OAAOF,UACxC,uBACA,wBAAQH,KAAK,SAAb,4BAEA,uBACIA,KAAK,SACLG,MAAM,iBACNG,QAAU,kBAAOpB,GAAc,SAAAD,GAAU,4BAASA,GAAT,CAAqBZ,aAGtE,cAAC,EAAD,CAAOH,KAAMG,EAAOA,EAAKH,KAAO,wBAChC,cAAC,EAAD,CAASG,KAAMA,GAAc,KAAOC,UAAWA,IAE9CD,EAAO,uCAAiB,KACvBY,EAAWsB,KAAK,SAACC,EAAMC,GACrB,OACI,gCACI,cAAC,EAAD,CAAOvC,KAAMsC,EAAKtC,MAAWsC,EAAKtC,MAClC,cAAC,EAAD,CAASG,KAAMA,EAAwBC,UAAWA,GAAxBkC,EAAKtC,KAAKuC,a,MCzC7CC,MAXf,WAEI,OACI,gCACI,kEACA,cAAC,EAAD,CAAOxC,KAAK,gBACZ,cAAC,EAAD,Q,MCGGyC,MAVf,WACE,OACE,qBAAKxC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCEYyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.fb6af37d.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Title(props) {\n    const { name } = props\n\n    return (\n        <div className='Title'>\n            <h2> { name }</h2>\n        </div>\n    )\n}\n\nexport default Title;","import React from 'react'\n\nfunction Details(props) {\n    // const { data.birth_year, height, hair_color, eye_color } = props\n    // console.log(props)\n    if (!props.data) {\n        return (\n            <div>\n            </div>\n        )\n    } else {\n        return (\n            <div className='details'>\n                <ul>\n                    <li>Homeworld: {props.homeworld}</li>\n                    <li>Birth Year: {props.data.birth_year}</li>\n                    <li>Height: {props.data.height}</li>\n                    <li>Hair Color: {props.data.hair_color}</li>\n                    <li>Eye Color: {props.data.eye_color}</li>\n                </ul>\n            </div>\n        )\n    }\n}\nexport default Details;","import React, { useState } from 'react';\n\nimport Title from '../Title/Title';\nimport Details from '../Details/Details';\n\nimport './StarWars.css';\n\nfunction StarWars() {\n    const [ number, setNumber ] = useState(0);\n    const [ data, setData ] = useState(null)\n    const [ homeworld, setHomeworld ] = useState(null)\n    const [ characters, setCharacter ] = useState([])\n\n    async function handleSubmit(e) {\n        e.preventDefault()\n        const url = `https://swapi.dev/api/people/${number}`\n\n        try {\n            const res = await fetch(url)\n            const json = await res.json()\n\n            await setData(json)\n            \n            const hw_res = await fetch(json.homeworld)\n            const hw_json = await hw_res.json()\n\n            setHomeworld(hw_json.name)\n            console.log(hw_json.name)\n        } catch(err) {\n            console.log(err)\n        }\n    }\n\n    return (\n        <div>\n            <form onSubmit= {e => handleSubmit(e)}>\n                <input \n                    type='text' \n                    pattern='[0-9]+'\n                    placeholder='enter number'\n                    value={number} \n                    onChange={(e) => setNumber(e.target.value) }/>\n                <br />\n                <button type='submit'>Load Character</button>\n\n                <input \n                    type='button' \n                    value='Save Character' \n                    onClick={ () =>  setCharacter( characters => [ ...characters, data])}\n                />\n            </form>\n            <Title name={data ? data.name : 'No character chosen'} />\n            <Details data={data ? data : null } homeworld={homeworld} />\n\n            {data ? <h1>Saved</h1> : null}\n            { characters.map( (char, i) => {\n                return (\n                    <div>\n                        <Title name={char.name} key={char.name} />\n                        <Details data={data} key={char.name+i} homeworld={homeworld} />\n                    </div>\n                )\n            }) \n            }\n        </div>\n    )\n\n}\n\nexport default StarWars;","import React from 'react';\n\nimport Title from '../Title/Title';\nimport StarWars from '../StarWars/StarWars';\n\nimport './Home.css';\n\nfunction Home() {\n\n    return(\n        <div>\n            <h1>FEW 2.3: Single Page Application</h1>\n            <Title name='Aucoeur Ngo' />\n            <StarWars />\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\n\nimport Home from './components/Home/Home';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Home />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}